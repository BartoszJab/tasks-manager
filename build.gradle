import java.time.LocalDateTime

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generateSampleData() {
	File importSql = file("src/main/resources/import.sql")
	importSql.write("")

	for (int i = 1; i <= 50; i++) {
		importSql.append("INSERT INTO groups(name) " +
				"VALUES ('Group${i}');\n"
		)
	}

	for (int i = 1; i <= 50; i++) {
		boolean isCompleted = Math.random() > 0.5
		int groupId = 1 + i / 5

		importSql.append("INSERT INTO tasks(name, description, deadline_time, is_completed, group_id) " +
				"VALUES ('Task ${i}', 'Description ${i}', '${LocalDateTime.now().plusDays(20)}', '${isCompleted}', '${groupId}');\n"
		)
	}

	for (int i = 1; i <= 50; i++) {
		boolean isDone = Math.random() > 0.5
		int taskId = 1 + i / 5

		importSql.append("INSERT INTO subtasks(content, is_done, task_id) " +
				"VALUES ('Content ${i}', '${isDone}', '${taskId}');\n"
		)
	}
}